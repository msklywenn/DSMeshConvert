///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Source code for "Creating Efficient Triangle Strips"
// (C) 2000, Pierre Terdiman (p.terdiman@wanadoo.fr)
//
// Version is 2.0.
//
// Following adjacency structures have been successfully used to implement:
//				- a triangle striper
//				- a silhouette tracker [used for shadow volumes, occlusion culling, and glow!]
//				- local search for collision detection on terrains
//				- subdivision surfaces
//
//	So that one IS useful....
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __ADJACENCY_H__
#define __ADJACENCY_H__
#include "../types.h"
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//																Class Adjacencies
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// MACROS
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	#define		MAKE_ADJ_TRI(x)			(x&0x3fffffff)
	#define		GET_EDGE_NB(x)			(x>>30)
	#define		IS_BOUNDARY(x)			(x==0xffffffff)

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Structures
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	struct AdjTriangle{									// Should be derived from a triangle structure
				u32					VRef[3];		// Vertex-references
				u32					ATri[3];		// Links/References of adjacent triangles. The 2 most significant bits contains
														// the counterpart edge in the adjacent triangle.
				u8					FindEdge(u32 vref0, u32 vref1);
				u32					OppositeVertex(u32 vref0, u32 vref1);
	};

	struct AdjEdge{
				u32					Ref0;			// Vertex reference
				u32					Ref1;			// Vertex reference
				u32					FaceNb;			// Owner face
	};

	struct ADJACENCIESCREATE{
				ADJACENCIESCREATE()		{ DFaces = 0; WFaces = 0; NbFaces = 0; }
				u32					NbFaces;		// #faces in source topo
				u32*					DFaces;			// list of faces (dwords) or 0
				u16*					WFaces;			// list of faces (words) or 0
	};

	class Adjacencies
	{
	private:
				u32					mNbEdges;
				u32					mCurrentNbFaces;
				AdjEdge*				mEdges;

				bool					AddTriangle(u32 ref0, u32 ref1, u32 ref2);
				bool					AddEdge(u32 ref0, u32 ref1, u32 face);
				bool					UpdateLink(u32 firsttri, u32 secondtri, u32 ref0, u32 ref1);
				u8					FindEdge(AdjTriangle* tri, u32 vref0, u32 vref1);
	public:
				Adjacencies();
				~Adjacencies();

				u32					mNbFaces;
				AdjTriangle*			mFaces;

				bool					Init(ADJACENCIESCREATE& create);
				bool					CreateDatabase();
	};

#endif // __ADJACENCY_H__
